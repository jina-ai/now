name: CI

on:
  pull_request:

jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - name: find the prev warning if exist
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "bad commit message"
      - name: Delete comment if exist
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fc.outputs.comment-id }},
            })
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: 'echo "module.exports = {extends: [''@commitlint/config-conventional'']}" > commitlint.config.js'
      - uses: wagoid/commitlint-github-action@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: if lint failed
        if: ${{ failure() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Thanks for your contribution :heart:
            :broken_heart: Unfortunately, this PR has one ore more **bad commit messages**, it can not be merged. To fix this problem, please refer to:
            - [Commit Message Guideline for the First Time Contributor](https://github.com/jina-ai/jina/issues/553)
            - [Contributing Guideline](https://github.com/jina-ai/jina/blob/master/CONTRIBUTING.md)

            Note, other CI tests will *not* *start* until the commit messages get fixed.

            This message will be deleted automatically when the commit messages get fixed.
          reaction-type: "eyes"

  lint-flake-8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/
  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  import-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir .
      - name: Test basic import
        run: python -c 'from now import run_all_k8s'

  prep-testbed:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black, import-test]
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}


  core-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir ".[test]"
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --cov=now --cov-report=xml \
            -v -s -m "not gpu" ${{ matrix.test-path }}
          echo "::set-output name=codecov_flag::now"
        timeout-minutes: 75
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false
#          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  # just for blocking the merge until all parallel core-test are successful
  success-all-test:
    needs: core-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"

  check-if-frontend-has-changed:
#    needs: success-all-test
    needs: [commit-lint, lint-flake-8, check-black]
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.check_frontend_changed.outputs.frontend_changed }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: check_frontend_changed
        with:
          filters: |
            frontend_changed:
              - 'now/frontend/**'

  dockerize-and-push-frontend:
    runs-on: ubuntu-latest
    needs: check-if-frontend-has-changed
    if: needs.check-if-frontend-has-changed.outputs.frontend_changed == 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Get frontend tag
        run: |
          FILE='now/run_all_k8s.py'
          FRONTEND_TAG=$(sed -n '/docker_frontend_tag =/p' $FILE | cut -d \' -f2)
          echo "FRONTEND_TAG=$FRONTEND_TAG" >> $GITHUB_ENV
      - name: Check that tag isn't used already
        env:
          IMAGE_TAG: ${{ env.FRONTEND_TAG }}
        run: |
          if docker manifest inspect jinaaitmp/now-frontend:$IMAGE_TAG; then
            echo "Docker tag is used already. Please update frontend tag"
            exit 1
          else
            echo "Docker tag isn't used already, continue to build..."
          fi
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_DEVBOT_USER }}
          password: ${{ secrets.DOCKERHUB_DEVBOT_PWD }}
      - name: Build, tag, and push image to Hub
        env:
          IMAGE_TAG: ${{ env.FRONTEND_TAG }}
        run: |
          docker build -t now-frontend  now/frontend/.
          docker tag now-frontend jinaaitmp/now-frontend:$IMAGE_TAG
          docker push jinaaitmp/now-frontend:$IMAGE_TAG
